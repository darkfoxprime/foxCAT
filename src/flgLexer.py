#!/usr/bin/python

import sys
import codecs
import copy

class flgToken(object):
  """A token returned by the flgLexer.  The minimal token has a token name, value, and location."""

  def __init__(self, token=None, value=None, location=None):
    """Create a new token with the given token name, value, and location, if provided."""
    if isinstance(token,flgToken):
      self.token = token.token
      self.value = token.value[:]
      self.location = dict(token.location.items())
    else:
      self.token = token
      self.value = value
      self.location = location
  def copy(self):
    return flgToken(self)
  def __str__(self):
    return u"%s(%s)" % (self.token, self.value)
  def __repr__(self):
    return u"%s(token=%s,value=%s,location=%s)" % (self.__class__.__name__, repr(self.token), repr(self.value), repr(self.location))

class flgLexer(object):
  """The flgLexer class.  This contains the tables for the lexer, plus the lexer code itself."""

  # the tables are generated by the lexer generator class.
  # The initial table is recorded in the "%initial" entry.
  # The tokens list, with associated values, is recorded in the "%tokens" entry.
  tables_0={
    u'comment':[(None,(((0,9),3),((10,10),3),((11,57),3),((58,58),1),((59,2097151),3))),(u'%skip',(((41,41),2),)),((u'%skip',(u'(',u'pop',(u'comment',))),()),(u'%skip',())],
    '%initial':u'normal',
    u'normal':[(None,(((9,10),23),((32,32),23),((34,34),21),((36,36),19),((37,37),17),((39,39),14),((40,40),12),((41,41),11),((43,43),10),((44,44),9),((45,45),7),((47,47),6),((48,57),5),((60,60),3),((61,61),2),((65,90),1),((95,95),1),((97,122),1))),(1,(((48,57),1),((65,90),1),((95,95),1),((97,122),1))),(3,()),(None,(((45,45),4),)),(15,()),(4,(((48,57),5),)),((17,u'regexp'),()),(None,(((43,43),10),((45,45),10),((48,57),5),((62,62),8))),((16,(u'(',u'push',(u'expression',))),()),(9,()),(None,(((43,43),10),((45,45),10),((48,57),5))),(8,()),(7,(((58,58),13),)),((u'%skip',(u'(',u'push',(u'comment',))),()),(None,(((0,38),14),((39,39),16),((40,91),14),((92,92),15),((93,2097151),14))),(None,(((0,9),14),((11,2097151),14))),(6,(((34,34),21),((39,39),14))),(None,(((97,122),18),)),(2,(((97,122),18),)),(None,(((48,57),20),)),(5,(((48,57),20),)),(None,(((0,33),21),((34,34),16),((35,91),21),((92,92),22),((93,2097151),21))),(None,(((0,9),21),((11,2097151),21))),(u'%skip',(((9,10),23),((32,32),23)))],
    '%tokens':(u'%eof',u'C_TOKEN',u'C_DIRECTIVE',u'C_EQUALS',u'C_NUMBER',u'C_POS_PARAM',u'C_QUOTEDSTR',u'C_PAREN_OPEN',u'C_PAREN_CLOSE',u'C_COMMA',u'C_PLUS',u'C_MINUS',u'C_TIMES',u'C_DIVIDE',u'C_MODULO',u'C_DERIVES',u'C_ACTION',u'L_RX_START',u'L_RX_END',u'L_RX_ALTERNATE',u'L_RX_PLUS',u'L_RX_QUESTION',u'L_RX_STAR',u'L_RX_ATOM',u'L_RX_CHARCLASS',u'L_RX_CC_CHAR',u'L_RX_CC_END',u'L_RX_CC_RANGE',u'L_RX_GRP_CLOSE',u'L_RX_GRP_OPEN'),
    u'charclass':[(None,(((0,44),17),((45,45),16),((46,91),17),((92,92),2),((93,93),1),((94,2097151),17))),((26,u'regexp'),()),(None,(((0,47),17),((48,55),14),((56,84),17),((85,85),7),((86,116),17),((117,117),3),((118,119),17),((121,2097151),17))),(None,(((48,57),4),((65,70),4),((97,102),4))),(None,(((48,57),5),((65,70),5),((97,102),5))),(None,(((48,57),6),((65,70),6),((97,102),6))),(None,(((48,57),17),((65,70),17),((97,102),17))),(None,(((48,57),8),((65,70),8),((97,102),8))),(None,(((48,57),9),((65,70),9),((97,102),9))),(None,(((48,57),10),((65,70),10),((97,102),10))),(None,(((48,57),11),((65,70),11),((97,102),11))),(None,(((48,57),12),((65,70),12),((97,102),12))),(None,(((48,57),13),((65,70),13),((97,102),13))),(None,(((48,57),6),((65,70),6),((97,102),6))),(None,(((48,55),15),)),(None,(((48,55),17),)),(27,()),(25,())],
    '%tokenmap':{u'C_TOKEN':1,u'L_RX_STAR':22,u'C_TIMES':12,u'C_DERIVES':15,u'C_COMMA':9,u'L_RX_GRP_OPEN':29,u'L_RX_CC_CHAR':25,u'%eof':0,u'C_DIRECTIVE':2,u'C_PAREN_CLOSE':8,u'C_DIVIDE':13,u'L_RX_ATOM':23,u'C_QUOTEDSTR':6,u'L_RX_CHARCLASS':24,u'L_RX_CC_END':26,u'L_RX_ALTERNATE':19,u'L_RX_END':18,u'C_PAREN_OPEN':7,u'C_POS_PARAM':5,u'L_RX_QUESTION':21,u'C_ACTION':16,u'C_PLUS':10,u'L_RX_GRP_CLOSE':28,u'L_RX_CC_RANGE':27,u'C_MINUS':11,u'C_EQUALS':3,u'C_NUMBER':4,u'L_RX_START':17,u'L_RX_PLUS':20,u'C_MODULO':14},
    u'regexp':[(None,(((0,39),26),((40,40),25),((41,41),24),((42,42),23),((43,43),22),((44,46),26),((47,47),21),((48,62),26),((63,63),20),((64,90),26),((91,91),16),((92,92),2),((93,123),26),((124,124),1),((125,2097151),26))),(19,()),(None,(((0,47),26),((48,55),14),((56,84),26),((85,85),7),((86,116),26),((117,117),3),((118,119),26),((121,2097151),26))),(None,(((48,57),4),((65,70),4),((97,102),4))),(None,(((48,57),5),((65,70),5),((97,102),5))),(None,(((48,57),6),((65,70),6),((97,102),6))),(None,(((48,57),26),((65,70),26),((97,102),26))),(None,(((48,57),8),((65,70),8),((97,102),8))),(None,(((48,57),9),((65,70),9),((97,102),9))),(None,(((48,57),10),((65,70),10),((97,102),10))),(None,(((48,57),11),((65,70),11),((97,102),11))),(None,(((48,57),12),((65,70),12),((97,102),12))),(None,(((48,57),13),((65,70),13),((97,102),13))),(None,(((48,57),6),((65,70),6),((97,102),6))),(None,(((48,55),15),)),(None,(((48,55),26),)),((24,u'charclass'),(((45,45),19),((93,93),18),((94,94),17))),((24,u'charclass'),(((45,45),19),((93,93),18))),((24,u'charclass'),(((45,45),19),)),((24,u'charclass'),()),(21,()),((18,u'normal'),()),(20,()),(22,()),(28,()),(29,()),(23,())],
    u'expression':[(None,(((9,9),21),((10,10),20),((32,32),21),((34,34),18),((36,36),16),((37,37),15),((39,39),12),((40,40),11),((41,41),10),((42,42),9),((43,43),8),((44,44),7),((45,45),5),((47,47),4),((48,57),3),((61,61),2),((65,90),1),((95,95),1),((97,122),1))),(1,(((48,57),1),((65,90),1),((95,95),1),((97,122),1))),(3,()),(4,(((48,57),3),)),(13,()),(11,(((43,43),6),((45,45),6),((48,57),3))),(None,(((43,43),6),((45,45),6),((48,57),3))),(9,()),(10,(((43,43),6),((45,45),6),((48,57),3))),(12,()),(8,()),(7,()),(None,(((0,38),12),((39,39),14),((40,91),12),((92,92),13),((93,2097151),12))),(None,(((0,9),12),((11,2097151),12))),(6,(((34,34),18),((39,39),12))),(14,()),(None,(((48,57),17),)),(5,(((48,57),17),)),(None,(((0,33),18),((34,34),14),((35,91),18),((92,92),19),((93,2097151),18))),(None,(((0,9),18),((11,2097151),18))),((u'%skip',(u'(',u'pop',(u'expression',))),(((10,10),20),)),(u'%skip',(((9,9),21),((32,32),21)))],
  }
  tables_1={
    u'comment':[(None,(((0,9),3),((10,10),3),((11,57),3),((58,58),1),((59,1114111),3))),(u'%skip',(((41,41),2),)),((u'%skip',(u'(',u'pop',(u'comment',))),()),(u'%skip',())],
    '%initial':u'normal',
    u'normal':[(None,(((9,10),23),((32,32),23),((34,34),21),((36,36),19),((37,37),17),((39,39),14),((40,40),12),((41,41),11),((43,43),10),((44,44),9),((45,45),7),((47,47),6),((48,57),5),((60,60),3),((61,61),2),((65,90),1),((95,95),1),((97,122),1))),(1,(((48,57),1),((65,90),1),((95,95),1),((97,122),1))),((3,(u'(',u'push',(u'expression',))),()),(None,(((45,45),4),)),(15,()),(4,(((48,57),5),)),((17,u'regexp'),()),(None,(((48,57),5),((62,62),8))),((16,(u'(',u'push',(u'expression',))),()),(9,()),(None,(((48,57),5),)),(8,()),(7,(((58,58),13),)),((u'%skip',(u'(',u'push',(u'comment',))),()),(None,(((0,38),14),((39,39),16),((40,91),14),((92,92),15),((93,1114111),14))),(None,(((0,9),14),((11,1114111),14))),(6,(((34,34),21),((39,39),14))),(None,(((97,122),18),)),(2,(((97,122),18),)),(None,(((48,57),20),)),(5,(((48,57),20),)),(None,(((0,33),21),((34,34),16),((35,91),21),((92,92),22),((93,1114111),21))),(None,(((0,9),21),((11,1114111),21))),(u'%skip',(((9,10),23),((32,32),23)))],
    '%tokens':[u'%eof',u'C_TOKEN',u'C_DIRECTIVE',u'C_EQUALS',u'C_NUMBER',u'C_POS_PARAM',u'C_QUOTEDSTR',u'C_PAREN_OPEN',u'C_PAREN_CLOSE',u'C_COMMA',u'C_PLUS',u'C_MINUS',u'C_TIMES',u'C_DIVIDE',u'C_MODULO',u'C_DERIVES',u'C_ACTION',u'L_RX_START',u'L_RX_END',u'L_RX_ALTERNATE',u'L_RX_PLUS',u'L_RX_QUESTION',u'L_RX_STAR',u'L_RX_ATOM',u'L_RX_CHARCLASS',u'L_RX_CC_CHAR',u'L_RX_CC_END',u'L_RX_CC_RANGE',u'L_RX_GRP_CLOSE',u'L_RX_GRP_OPEN'],
    u'charclass':[(None,(((0,44),20),((45,45),19),((46,91),20),((92,92),2),((93,93),1),((94,1114111),20))),((26,u'regexp'),()),(None,(((0,47),20),((48,55),17),((56,84),20),((85,85),9),((86,116),20),((117,117),5),((118,119),20),((120,120),3),((121,1114111),20))),(None,(((48,57),4),((65,70),4),((97,102),4))),(None,(((48,57),20),((65,70),20),((97,102),20))),(None,(((48,57),6),((65,70),6),((97,102),6))),(None,(((48,57),7),((65,70),7),((97,102),7))),(None,(((48,57),8),((65,70),8),((97,102),8))),(None,(((48,57),20),((65,70),20),((97,102),20))),(None,(((48,57),10),((65,70),10),((97,102),10))),(None,(((48,57),11),((65,70),11),((97,102),11))),(None,(((48,57),12),((65,70),12),((97,102),12))),(None,(((48,57),13),((65,70),13),((97,102),13))),(None,(((48,57),14),((65,70),14),((97,102),14))),(None,(((48,57),15),((65,70),15),((97,102),15))),(None,(((48,57),16),((65,70),16),((97,102),16))),(None,(((48,57),20),((65,70),20),((97,102),20))),(None,(((48,55),18),)),(None,(((48,55),20),)),(27,()),(25,())],
    '%tokenmap':{u'C_TOKEN':1,u'L_RX_STAR':22,u'C_TIMES':12,u'C_DERIVES':15,u'C_COMMA':9,u'L_RX_GRP_OPEN':29,u'L_RX_CC_CHAR':25,u'%eof':0,u'C_DIRECTIVE':2,u'C_PAREN_CLOSE':8,u'C_DIVIDE':13,u'L_RX_ATOM':23,u'C_QUOTEDSTR':6,u'L_RX_CHARCLASS':24,u'L_RX_CC_END':26,u'L_RX_ALTERNATE':19,u'L_RX_END':18,u'C_PAREN_OPEN':7,u'C_POS_PARAM':5,u'L_RX_QUESTION':21,u'C_ACTION':16,u'C_PLUS':10,u'L_RX_GRP_CLOSE':28,u'L_RX_CC_RANGE':27,u'C_MINUS':11,u'C_EQUALS':3,u'C_NUMBER':4,u'L_RX_START':17,u'L_RX_PLUS':20,u'C_MODULO':14},
    u'regexp':[(None,(((0,39),29),((40,40),28),((41,41),27),((42,42),26),((43,43),25),((44,46),29),((47,47),24),((48,62),29),((63,63),23),((64,90),29),((91,91),19),((92,92),2),((93,123),29),((124,124),1),((125,1114111),29))),(19,()),(None,(((0,47),29),((48,55),17),((56,84),29),((85,85),9),((86,116),29),((117,117),5),((118,119),29),((120,120),3),((121,1114111),29))),(None,(((48,57),4),((65,70),4),((97,102),4))),(None,(((48,57),29),((65,70),29),((97,102),29))),(None,(((48,57),6),((65,70),6),((97,102),6))),(None,(((48,57),7),((65,70),7),((97,102),7))),(None,(((48,57),8),((65,70),8),((97,102),8))),(None,(((48,57),29),((65,70),29),((97,102),29))),(None,(((48,57),10),((65,70),10),((97,102),10))),(None,(((48,57),11),((65,70),11),((97,102),11))),(None,(((48,57),12),((65,70),12),((97,102),12))),(None,(((48,57),13),((65,70),13),((97,102),13))),(None,(((48,57),14),((65,70),14),((97,102),14))),(None,(((48,57),15),((65,70),15),((97,102),15))),(None,(((48,57),16),((65,70),16),((97,102),16))),(None,(((48,57),29),((65,70),29),((97,102),29))),(None,(((48,55),18),)),(None,(((48,55),29),)),((24,u'charclass'),(((45,45),22),((93,93),21),((94,94),20))),((24,u'charclass'),(((45,45),22),((93,93),21))),((24,u'charclass'),(((45,45),22),)),((24,u'charclass'),()),(21,()),((18,u'normal'),()),(20,()),(22,()),(28,()),(29,()),(23,())],
    u'expression':[(None,(((9,9),20),((10,10),19),((32,32),20),((34,34),17),((36,36),15),((37,37),14),((39,39),11),((40,40),10),((41,41),9),((42,42),8),((43,43),7),((44,44),6),((45,45),5),((47,47),4),((48,57),3),((61,61),2),((65,90),1),((95,95),1),((97,122),1))),(1,(((48,57),1),((65,90),1),((95,95),1),((97,122),1))),(3,()),(4,(((48,57),3),)),(13,()),(11,(((48,57),3),)),(9,()),(10,(((48,57),3),)),(12,()),(8,()),(7,()),(None,(((0,38),11),((39,39),13),((40,91),11),((92,92),12),((93,1114111),11))),(None,(((0,9),11),((11,1114111),11))),(6,(((34,34),17),((39,39),11))),(14,()),(None,(((48,57),16),)),(5,(((48,57),16),)),(None,(((0,33),17),((34,34),13),((35,91),17),((92,92),18),((93,1114111),17))),(None,(((0,9),17),((11,1114111),17))),((u'%skip',(u'(',u'pop',(u'expression',))),()),(u'%skip',())],
  }
  tables={
    u'comment':[(None,(((0,9),3),((10,10),3),((11,57),3),((58,58),1),((59,1114111),3))),(u'%skip',(((41,41),2),)),((u'%skip',(u'(',u'pop',(u'comment',))),()),(u'%skip',())],
    u'%initial':u'normal',
    u'normal':[(None,(((9,10),23),((32,32),23),((34,34),21),((36,36),19),((37,37),17),((39,39),14),((40,40),12),((41,41),11),((43,43),10),((44,44),9),((45,45),7),((47,47),6),((48,57),5),((60,60),3),((61,61),2),((65,90),1),((95,95),1),((97,122),1))),(1,(((48,57),1),((65,90),1),((95,95),1),((97,122),1))),((3,(u'(',u'push',(u'expression',))),()),(None,(((45,45),4),)),(15,()),(4,(((48,57),5),)),((17,u'regexp'),()),(None,(((48,57),5),((62,62),8))),((16,(u'(',u'push',(u'expression',))),()),(9,()),(None,(((48,57),5),)),(8,()),(7,(((58,58),13),)),((u'%skip',(u'(',u'push',(u'comment',))),()),(None,(((0,38),14),((39,39),16),((40,91),14),((92,92),15),((93,1114111),14))),(None,(((0,9),14),((11,1114111),14))),(6,(((34,34),21),((39,39),14))),(None,(((97,122),18),)),(2,(((97,122),18),)),(None,(((48,57),20),)),(5,(((48,57),20),)),(None,(((0,33),21),((34,34),16),((35,91),21),((92,92),22),((93,1114111),21))),(None,(((0,9),21),((11,1114111),21))),(u'%skip',(((9,10),23),((32,32),23)))],
    '%tokens':[u'%eof',u'C_TOKEN',u'C_DIRECTIVE',u'C_EQUALS',u'C_NUMBER',u'C_POS_PARAM',u'C_QUOTEDSTR',u'C_PAREN_OPEN',u'C_PAREN_CLOSE',u'C_COMMA',u'C_PLUS',u'C_MINUS',u'C_TIMES',u'C_DIVIDE',u'C_MODULO',u'C_DERIVES',u'C_ACTION',u'L_RX_START',u'L_RX_END',u'L_RX_ALTERNATE',u'L_RX_PLUS',u'L_RX_QUESTION',u'L_RX_STAR',u'L_RX_ATOM',u'L_RX_CHARCLASS',u'L_RX_CC_CHAR',u'L_RX_CC_END',u'L_RX_CC_RANGE',u'L_RX_GRP_CLOSE',u'L_RX_GRP_OPEN'],
    u'charclass':[(None,(((0,44),20),((45,45),19),((46,91),20),((92,92),2),((93,93),1),((94,1114111),20))),((26,u'regexp'),()),(None,(((0,47),20),((48,55),17),((56,84),20),((85,85),9),((86,116),20),((117,117),5),((118,119),20),((120,120),3),((121,1114111),20))),(None,(((48,57),4),((65,70),4),((97,102),4))),(None,(((48,57),20),((65,70),20),((97,102),20))),(None,(((48,57),6),((65,70),6),((97,102),6))),(None,(((48,57),7),((65,70),7),((97,102),7))),(None,(((48,57),8),((65,70),8),((97,102),8))),(None,(((48,57),20),((65,70),20),((97,102),20))),(None,(((48,57),10),((65,70),10),((97,102),10))),(None,(((48,57),11),((65,70),11),((97,102),11))),(None,(((48,57),12),((65,70),12),((97,102),12))),(None,(((48,57),13),((65,70),13),((97,102),13))),(None,(((48,57),14),((65,70),14),((97,102),14))),(None,(((48,57),15),((65,70),15),((97,102),15))),(None,(((48,57),16),((65,70),16),((97,102),16))),(None,(((48,57),20),((65,70),20),((97,102),20))),(None,(((48,55),18),)),(None,(((48,55),20),)),(27,()),(25,())],
    '%tokenmap':{u'C_TOKEN':1,u'L_RX_STAR':22,u'C_TIMES':12,u'C_DERIVES':15,u'C_COMMA':9,u'L_RX_GRP_OPEN':29,u'L_RX_CC_CHAR':25,u'%eof':0,u'C_DIRECTIVE':2,u'C_PAREN_CLOSE':8,u'C_DIVIDE':13,u'L_RX_ATOM':23,u'C_QUOTEDSTR':6,u'L_RX_CHARCLASS':24,u'L_RX_CC_END':26,u'L_RX_ALTERNATE':19,u'L_RX_END':18,u'C_PAREN_OPEN':7,u'C_POS_PARAM':5,u'L_RX_QUESTION':21,u'C_ACTION':16,u'C_PLUS':10,u'L_RX_GRP_CLOSE':28,u'L_RX_CC_RANGE':27,u'C_MINUS':11,u'C_EQUALS':3,u'C_NUMBER':4,u'L_RX_START':17,u'L_RX_PLUS':20,u'C_MODULO':14},
    u'regexp':[(None,(((0,39),29),((40,40),28),((41,41),27),((42,42),26),((43,43),25),((44,46),29),((47,47),24),((48,62),29),((63,63),23),((64,90),29),((91,91),19),((92,92),2),((93,123),29),((124,124),1),((125,1114111),29))),(19,()),(None,(((0,47),29),((48,55),17),((56,84),29),((85,85),9),((86,116),29),((117,117),5),((118,119),29),((120,120),3),((121,1114111),29))),(None,(((48,57),4),((65,70),4),((97,102),4))),(None,(((48,57),29),((65,70),29),((97,102),29))),(None,(((48,57),6),((65,70),6),((97,102),6))),(None,(((48,57),7),((65,70),7),((97,102),7))),(None,(((48,57),8),((65,70),8),((97,102),8))),(None,(((48,57),29),((65,70),29),((97,102),29))),(None,(((48,57),10),((65,70),10),((97,102),10))),(None,(((48,57),11),((65,70),11),((97,102),11))),(None,(((48,57),12),((65,70),12),((97,102),12))),(None,(((48,57),13),((65,70),13),((97,102),13))),(None,(((48,57),14),((65,70),14),((97,102),14))),(None,(((48,57),15),((65,70),15),((97,102),15))),(None,(((48,57),16),((65,70),16),((97,102),16))),(None,(((48,57),29),((65,70),29),((97,102),29))),(None,(((48,55),18),)),(None,(((48,55),29),)),((24,u'charclass'),(((45,45),22),((93,93),21),((94,94),20))),((24,u'charclass'),(((45,45),22),((93,93),21))),((24,u'charclass'),(((45,45),22),)),((24,u'charclass'),()),(21,()),((18,u'normal'),()),(20,()),(22,()),(28,()),(29,()),(23,())],
    u'expression':[(None,(((9,9),20),((10,10),19),((32,32),20),((34,34),17),((36,36),15),((37,37),14),((39,39),11),((40,40),10),((41,41),9),((42,42),8),((43,43),7),((44,44),6),((45,45),5),((47,47),4),((48,57),3),((61,61),2),((65,90),1),((95,95),1),((97,122),1))),(1,(((48,57),1),((65,90),1),((95,95),1),((97,122),1))),(3,()),(4,(((48,57),3),)),(13,()),(11,(((48,57),3),)),(9,()),(10,(((48,57),3),)),(12,()),(8,()),(7,()),(None,(((0,38),11),((39,39),13),((40,91),11),((92,92),12),((93,1114111),11))),(None,(((0,9),11),((11,1114111),11))),(6,(((34,34),17),((39,39),11))),(14,()),(None,(((48,57),16),)),(5,(((48,57),16),)),(None,(((0,33),17),((34,34),13),((35,91),17),((92,92),18),((93,1114111),17))),(None,(((0,9),17),((11,1114111),17))),((u'%skip',(u'(',u'pop',(u'expression',))),()),(u'%skip',())],
  }

  def __init__(self, source=sys.stdin, filename=u"(stdin)"):
    """Initialize the lexer with the initial source and filename.  If not provided, these parameters default to a source of sys.stdin and a filename of "(stdin)"."""
    self.location = []
    self.source = []
    self.lookahead = []
    self.pushed_tokens = [[]]  # allow for pushed tokens after the last end-of-file
    self.new_source(source=source, filename=filename)
    self.table_stack = [self.tables.get(u'%initial', u'default')]

  def new_source(self, source, filename):
    """Start processing from a new source.  Save the current source so that when the new source finishes, the lexer will continue where it was in the current source."""
    self.location.insert(0, { u'file':filename, u'line':0, u'char':0, u'newline':True })
    self.source.insert(0, codecs.EncodedFile(source, u'utf-8'))
    self.lookahead.insert(0, [])
    self.pushed_tokens.insert(0, [])

  def debug(self, token, nexttable):
    pass

  # read the next character from the given source.
  # if needed, update the location.
  def read_char(self, source, location):
    """Read a character from the given source at the given location.  If needed, update the location.  This is factored out of the rest of the code in case special file handling is required by a subclass."""
    return source.read(1)

  # fetch the next character from the source stack.
  # assumption: once an end-of-file is returned, this will never be called again
  def __next_char(self):
    """Fetch the next character from the lookahead and source stack.  This uses self.read_char() to actually read from a source."""
    la = self.lookahead[0]
    li = self.lookahead_idx
    while li >= len(la):
      if self.location[0][u'newline']:
        self.location[0][u'line'] += 1
        self.location[0][u'char'] = 1
      else:
        self.location[0][u'char'] += 1
      del self.location[0][u'newline']
      c = self.read_char(self.source[0], self.location[0])
      symloc = self.location[0].copy()
      self.location[0][u'newline'] = (c == u'\n')
      la.append( (c, symloc) )
    c = la[li][0]
    if c == u'':
      return -1
    return ord(c)

  def push(self, token):
    self.pushed_tokens[0].insert(0, token)

  def next_token(self):
    """Return the next token from the source.  This raises StopIteration if we've already reached EOF."""
    if len(self.pushed_tokens[0]) > 0:
      token = self.pushed_tokens[0].pop(0)
      return token
    if len(self.location) == 0:
      raise StopIteration("No more tokens after EOF")
    state = 0
    dfa = self.tables[self.table_stack[0]]
    self.lookahead_idx = 0
    accept = None
    while 1:
      if state > 0 and dfa[state][0] != None:
        accept = (state,self.lookahead_idx)
      sym = self.__next_char()

      acc = u'(None)'
      if accept is not None:
        acc = dfa[accept[0]][0]
        if isinstance(acc, tuple):
          (acc,nxt) = acc
          nxt = u'(' + repr(nxt) + u')'
        else:
          nxt = u''
        if isinstance(acc,int):
          acc = self.tables[u'%tokens'][acc]
        acc += nxt

      next_state = None
      for ((symfirst,symlast),transition_state) in dfa[state][1]:
        # optimization: since assumption is that transitions are sorted:
        # if symlast is >= sym, this is the last transition to check
        if symlast >= sym:
          # if symfirst <= sym, our character matches the transition
          if symfirst <= sym:
            # set the next state to this transition state
            next_state = transition_state
          # we're done with the loop
          break
      # if we have a transition, take it
      if next_state is not None:
        state = next_state
        self.lookahead_idx += 1
      # otherwise, if we have an accept state,
      # find the accepted token from the accept state,
      # find the token value and location from the lookahead,
      # pop the accepted token off the lookahead,
      # and return the token.
      elif accept is not None:
        (accepted_state, accepted_idx) = accept
        # join the first component of the accepted part of the lookahead
        # together to form the token value
        val = u"".join(map(lambda x:x[0], self.lookahead[0][0:accepted_idx]))
        # grab the location of the start of the lookahead
        loc = self.lookahead[0][0][1]
        # delete the accepted part of the lookahead
        self.lookahead[0] = self.lookahead[0][accepted_idx:]
        # grab the token from the state table
        tkn = dfa[accepted_state][0]
        # if the accepted state has a transition to a different table,
        # shift our table
        if isinstance(tkn, tuple):
          (tkn,nexttable) = tkn
        else:
          nexttable = None
        # generate the new token
        token = flgToken(token=tkn, value=val, location=loc)
        # call the debugging hook
        self.debug(token, self.table_stack[0], nexttable)
        # if nexttable is a tuple itself, that means it's a transition function such as push or pop.  grr.  stupid context-sensitive "context-free" lexers.
        if isinstance(nexttable, tuple):
          # it's supposed to be simple:  a '(', a transition function, and a table name
          assert(len(nexttable)==3)
          # transition function 'push' pushes the current table onto the table stack and replaces the current table with the transition table
          if unicode(nexttable[1]) == u'push':
            self.table_stack.insert(0, nexttable[2][0])
          # transition function 'pop' pops the current table off of the table stack; the argument to pop is technically ignored
          elif unicode(nexttable[1]) == u'pop':
            self.table_stack.pop(0)
          # invalid function
          else:
            assert False
        elif nexttable is not None:
          self.table_stack[0] = nexttable
        # return the new token
        return token
      # no transition and no accept state:
      # check if we have a valid end-of-file (sym == -1 and that's the
      # only thing in the lookahead stack)
      elif sym == -1 and len(self.lookahead[0]) == 1:
        # we need to pop a source file off and keep going.
        # save the location of the eof, in case this is a real eof.
        loc = self.lookahead[0][0][1].copy()
        # remove the first element of source, lookahead, location, and pushed_tokens.
        self.source.pop(0)
        self.lookahead.pop(0)
        self.location.pop(0)
        self.pushed_tokens.pop(0)
        # if source is now empty, return an EOF token.
        if len(self.source) == 0:
          token = u'%eof'
          return flgToken(token=self.tables[u'%tokenmap'][token], value=token, location=loc)
        # otherwise, let the loop continue with the revealed previous source.
      # otherwise, we are in an error state
      else:
        # TODO: is this the right way to handle this?
        val = u"".join(map(lambda x:x[0], self.lookahead[0]))
        loc = self.lookahead[0][0][1]
        # remove the error-causing symbols from the lookahead.
        # if we identified the error at end-of-file, keep the
        # end-of-file symbol in the lookahead.
        if sym == -1:
          self.lookahead[0] = self.lookahead[0][-1:]
        else:
          self.lookahead[0] = []
        # return the None (error) token with the current lookahead value and location
        return flgToken(token=None, value=val, location=loc)

  def __iter__(self):
    """Return the lexer itself as its own iterator."""
    return self
    
  def next(self):
    """Iterate through the tokens, skipping the special %skip tokens.  This relies on the next_token() method raising StopIteration when called after end-of-file."""
    tok = self.next_token()
    while tok.token == u'%skip':
      tok = self.next_token()
    return tok

if __name__ == '__main__':

  l = flgLexer()
  for tok in l:
    print str(tok)
