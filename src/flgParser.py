
import sys

class ActionFailedException(Exception):
  pass

class flgParser(object):

  def __init__(self):
    pass

  def debug(self, states, values, lookahead, action):
    pass

  def initializeParser(self):
    pass

  def finalizeParser(self, value):
    return value

  def parse(self, lexer):
    self.lexer = lexer
    states = [ self.actions[None] ]
    values = []
    seen = []
    lookahead = None
    self.initializeParser()
    while len(states) == 1 or states[-1] > 0:
      if lookahead is None:
        lookahead = lexer.next()
      #print >> sys.stderr, "* parser states %s values %s lookahead %s" % (repr(states), repr(values), repr(lookahead))
      a = self.actions.get( (states[-1],-lookahead.token), None )
      if a is None or (len(values) > 0 and values[-1] is None):
        _error_recovery(states, values, seen, lookahead)
      elif a < 0:
        rule = self.rules[-a]
        self.debug(-a, states, values, lookahead, rule[2])
        rulevars = values[-len(rule[1]):]
        states[-len(rule[1]):] = []
        values[-len(rule[1]):] = []
        # special stuff to allow the action processor to change the input source:
        # tell the lexer to save the lookahead
        self.lexer.push(lookahead)
        lookahead = None
        try:
          val = self._eval_action(rule[2], rulevars)
        except ActionFailedException,e:
          val = None
        states.append(self.actions[(states[-1],rule[0])])
        values.append(val)
      else:
        seen = seen[-9:] + [lookahead]
        states.append(a)
        values.append(lookahead.value)
        lookahead = None
    return self.finalizeParser(values[0])

  def _eval_action(self, action, rulevars):
    #print >> sys.stderr, "_eval_action" + repr( (action,rulevars) )
    if action is None:
      return rulevars[0]
    elif isinstance(action, (str,unicode)):
      if action[0] == '$':
        return rulevars[int(action[1:])-1]
      elif action[0] == '"':
        return action
      else:
        return "_UNKNOWN_ACTION_" + repr(action)
    elif isinstance(action, (int)):
      return action
    elif action[0] == ')':
      return tuple([self._eval_action(listpart,rulevars) for listpart in action[1:]])
    elif action[0] == '(':
      val = eval("self.%s" % (action[1],))(*(tuple(self._eval_action(action[2], rulevars))))
      return val
    elif action[0] == '+':
      return self._eval_action(action[1], rulevars) + self._eval_action(action[2], rulevars)
    else:
      return "_UNKNOWN_ACTION_" + repr(action)







  actions={(71,-12):-6,(83,-23):-41,(56,-1):26,(111,-21):113,(90,-22):-40,(19,4):14,(91,13):99,(42,-8):-9,(118,-23):106,(92,14):94,(17,-6):23,(102,-20):-40,(119,6):66,(6,-16):7,(62,-4):54,(123,-14):9,(63,-10):-9,(61,0):-14,(57,-8):58,(39,-4):25,(12,-10):-12,(74,6):66,(107,-19):108,(92,-23):88,(72,-6):52,(109,-23):106,(105,-29):-41,(23,-9):-15,(94,-21):96,(51,0):-18,(22,-14):-11,(8,-14):9,(69,-5):53,(45,-1):26,(114,-24):-37,(18,-12):-12,(68,0):-8,(65,-11):-11,(67,-7):13,(69,5):70,(56,6):28,(68,-2):-8,(100,-19):-30,(52,-11):-15,(28,-12):-10,(88,-19):-38,(75,-11):11,(74,-4):54,(26,-14):-13,(56,-8):59,(116,-24):-32,(27,6):28,(37,-13):-7,(75,0):-7,(21,6):22,(79,13):99,(78,15):98,(77,-23):106,(79,14):94,(85,-25):86,(22,-11):-11,(32,-4):25,(119,-1):55,(17,6):18,(47,-9):-6,(72,-1):55,(46,-14):-7,(15,6):28,(67,-1):55,(90,-20):-40,(16,-11):17,(42,-12):-9,(77,-24):103,(115,-22):-39,(91,-23):88,(28,-13):-10,(54,-1):-16,(80,16):81,(53,-11):-17,(50,-8):51,(26,-3):39,(2,-2):-4,(13,6):28,(63,-12):-9,(38,-9):-19,(98,-20):-39,(24,-9):-17,(92,-24):80,(1,0):0,(63,-11):-9,(105,-19):-41,(5,10):6,(53,0):-17,(58,-10):-20,(115,-18):-39,(7,4):8,(103,16):104,(46,-11):-7,(93,-28):-33,(7,-6):52,(102,-21):-40,(8,0):-26,(40,-11):-14,(53,-1):-17,(10,-2):-9,(76,-1):-6,(52,-13):-15,(51,-12):-18,(61,-14):-14,(63,-14):-9,(65,-2):-11,(96,-19):-36,(100,14):94,(91,-29):79,(11,-6):52,(93,-19):-33,(110,-29):-33,(95,-29):-35,(71,-10):-6,(23,-8):-15,(83,-21):-41,(70,-13):-7,(19,6):28,(43,5):44,(91,15):98,(66,-11):-10,(72,-4):54,(55,-2):-13,(65,-14):-11,(73,-14):-8,(32,4):33,(8,-12):74,(9,6):66,(76,-11):11,(116,-23):-32,(34,6):28,(123,-12):74,(99,-29):-32,(75,-1):-7,(27,-8):38,(6,-2):-25,(87,-25):-42,(39,-1):26,(39,5):47,(58,0):-20,(0,9):2,(14,-12):36,(122,6):66,(80,-25):84,(10,-1):-9,(95,-24):-35,(94,-23):-34,(77,15):115,(56,-6):23,(52,-2):-15,(69,-7):13,(45,-4):25,(111,-19):-34,(3,-2):-2,(18,-14):-12,(34,-6):23,(20,-14):-6,(67,-5):53,(56,8):31,(28,-10):-10,(30,-10):-20,(99,-24):-32,(74,-6):52,(72,-7):13,(15,-6):23,(25,-9):-16,(120,-1):-5,(38,-14):-19,(24,-14):-17,(124,-2):-1,(61,-1):-14,(106,-19):-38,(78,13):99,(52,0):-15,(105,-22):-41,(33,-13):34,(9,-1):55,(35,-13):-8,(104,-25):84,(0,-2):119,(32,-1):26,(44,-12):-8,(70,-12):-7,(93,-23):-33,(19,-6):23,(71,-2):-6,(16,-9):-9,(42,-14):-9,(5,-17):77,(31,-8):-21,(11,6):12,(53,-13):-17,(59,0):-19,(124,-1):-1,(36,6):28,(108,13):116,(25,-8):-16,(38,-11):-19,(98,-22):-39,(62,-6):52,(97,-23):-37,(60,-6):52,(96,-24):-36,(33,-12):36,(35,-8):-8,(58,-12):-20,(95,-28):-35,(7,6):66,(83,-28):-41,(44,-13):-8,(68,-1):-8,(66,0):-10,(119,-17):77,(68,-12):-8,(55,-14):-13,(41,-6):23,(102,-23):-40,(119,5):76,(64,-6):52,(40,-9):-14,(88,-29):-38,(49,-10):-18,(51,-10):-18,(72,5):73,(73,0):-8,(120,-14):9,(81,-25):84,(14,-13):34,(59,-14):-19,(72,6):66,(11,-4):54,(10,-11):11,(95,-19):-35,(108,-29):78,(83,-19):-41,(83,-20):-41,(19,8):31,(62,-1):55,(114,-29):-37,(66,-13):-10,(68,-13):-8,(120,-2):-5,(20,-11):17,(17,-1):26,(45,5):46,(32,6):28,(29,-8):30,(41,5):42,(6,-1):-25,(4,-2):-3,(27,-6):23,(122,-5):53,(76,-14):-6,(26,-9):-13,(73,-10):64,(56,-4):25,(12,-14):-12,(122,4):123,(27,5):20,(37,-10):21,(34,-5):24,(110,-24):-33,(23,-13):-15,(33,-8):-24,(9,-5):53,(77,13):116,(22,-10):-11,(32,-7):19,(45,-6):23,(113,-29):-36,(110,-19):-33,(112,-18):-35,(16,-14):-9,(113,-23):-36,(55,-1):-13,(115,-23):-39,(100,-23):88,(73,-12):-8,(30,-12):-20,(3,-1):-2,(58,-2):-20,(113,-24):-36,(25,-11):-16,(62,6):66,(0,2):124,(24,-12):-17,(1,3):4,(106,-21):-38,(105,-24):-41,(9,-4):54,(35,-11):17,(84,-26):-44,(119,-6):52,(47,-13):-6,(65,0):-11,(44,-10):-8,(46,-10):-7,(19,-4):25,(117,0):-29,(118,15):115,(111,-22):112,(7,-7):13,(54,-14):-16,(40,-14):-14,(63,-13):-9,(97,-19):-37,(81,17):82,(26,-7):27,(90,-28):-40,(60,5):71,(108,15):115,(49,-13):-18,(51,-13):-18,(109,14):111,(98,-24):-39,(61,-11):-14,(37,-8):-7,(13,-5):24,(82,-25):-43,(104,17):82,(36,-7):19,(12,-1):-12,(124,0):-1,(11,-7):13,(88,-21):-38,(58,-14):-20,(71,-11):-6,(47,-8):-6,(94,-29):-34,(19,5):20,(66,-10):-10,(51,-2):-18,(68,-14):-8,(92,13):93,(17,-5):24,(112,-29):-35,(54,-11):-16,(64,-4):54,(101,-28):102,(89,-28):90,(123,-13):72,(49,-12):-18,(74,-1):55,(98,-29):-39,(109,-24):103,(63,-1):-9,(15,5):16,(108,-23):106,(120,-12):74,(12,-11):-12,(102,-29):-40,(74,5):75,(59,-12):-19,(11,-1):55,(34,-1):26,(10,-13):-9,(71,-14):-6,(23,-12):-15,(96,-29):-36,(55,-11):-13,(73,-11):11,(90,-21):-40,(69,-4):54,(39,6):28,(18,-9):-12,(64,6):65,(20,-9):-6,(65,-10):-11,(17,-4):25,(69,6):66,(56,5):20,(101,-19):91,(89,-19):91,(76,0):-6,(88,-20):-38,(30,-13):-20,(21,-6):23,(75,-14):-7,(27,-4):25,(122,-7):13,(26,-11):-13,(121,-2):-27,(39,-6):23,(15,-7):19,(25,-14):-16,(14,-8):-23,(27,7):29,(37,-12):-7,(106,-18):-38,(34,-7):19,(78,14):94,(86,-25):-45,(9,-7):13,(94,-19):-34,(37,-11):17,(22,-12):-11,(32,-5):24,(21,-5):24,(47,-12):-6,(43,-6):23,(19,-7):19,(16,-12):-9,(42,-9):-9,(70,-2):-7,(115,-21):-39,(52,-10):-15,(28,-14):-10,(122,-1):55,(53,-10):-17,(79,-29):79,(49,-8):-18,(13,7):50,(38,-10):-19,(24,-10):-17,(13,4):14,(106,-23):-38,(123,0):-28,(79,12):100,(36,-4):25,(105,-18):-41,(33,-9):-24,(35,-9):-8,(73,-13):-8,(6,0):-25,(71,-1):-6,(7,5):76,(83,-29):-41,(52,-12):-15,(103,17):87,(46,-12):-7,(19,-1):26,(39,4):40,(92,-28):-31,(118,13):110,(7,-5):53,(102,-22):-40,(40,-12):-14,(79,-24):80,(52,-14):-15,(78,-23):88,(54,-2):-16,(51,-11):-18,(109,-19):-31,(61,-13):-14,(13,-7):19,(36,-5):24,(100,13):93,(76,-12):-6,(11,-5):53,(10,-10):64,(83,-24):-41,(70,-14):-7,(22,-8):-11,(19,7):48,(114,-18):-37,(91,12):92,(66,-12):-10,(92,-29):79,(118,-18):-30,(92,15):98,(65,-13):-11,(41,-1):26,(17,-7):19,(102,-19):-40,(64,-1):55,(90,-19):-40,(16,-8):-9,(68,-10):-8,(2,-1):-4,(27,-7):19,(122,-4):54,(62,-7):13,(14,-9):-23,(59,-10):-19,(111,-20):114,(34,-4):25,(95,-23):-35,(23,-10):-15,(94,-24):-34,(70,-11):-7,(22,-13):-11,(8,-13):72,(69,-6):52,(67,6):66,(18,-11):-12,(113,-18):-36,(65,-12):-11,(96,-28):-36,(75,-2):-7,(56,7):57,(123,-2):-28,(55,-3):60,(76,-13):-6,(28,-11):-10,(99,-23):-32,(75,-12):-7,(27,-1):26,(70,-1):-7,(26,-13):-13,(87,-26):-42,(15,-5):24,(88,-24):-38,(37,-14):-7,(106,-20):-38,(78,12):100,(105,-21):-41,(92,-19):-31,(104,-26):105,(119,-7):13,(21,-7):19,(47,-10):-6,(20,-8):-6,(46,-13):-7,(43,-4):25,(19,-5):24,(16,-10):21,(42,-11):-9,(1,-2):119,(115,-19):-39,(7,-4):54,(30,-8):-20,(80,17):87,(53,-12):-17,(35,-10):21,(12,0):-12,(36,5):37,(108,12):109,(13,5):20,(38,-12):-19,(98,-19):-39,(24,-8):-17,(13,-1):26,(73,-2):-8,(60,-7):13,(36,-1):26,(105,-20):-41,(13,8):31,(44,-14):-8,(117,-16):-29,(93,-29):-33,(63,-2):-9,(55,-13):-13,(41,-5):24,(71,0):-6,(102,-24):-40,(119,10):121,(54,-10):-16,(64,-7):13,(40,-10):-14,(123,-1):-28,(49,-9):-18,(98,-28):-39,(62,-5):53,(121,-16):122,(97,-29):-37,(114,-23):-37,(100,15):98,(14,-14):15,(59,-13):-19,(58,-1):-20,(10,-12):-9,(83,-22):-41,(91,14):94,(66,-14):-10,(18,-8):-12,(20,-12):-6,(115,-20):-39,(41,-4):25,(45,6):28,(32,5):20,(115,-29):-39,(9,5):10,(76,-10):64,(28,-8):-10,(88,-23):-38,(61,-2):-14,(27,-5):24,(122,-6):52,(26,-10):-13,(97,-28):-37,(39,-7):19,(15,-4):25,(121,0):-27,(38,-8):-19,(107,-18):117,(111,-24):-34,(111,-18):-34,(37,-9):-7,(106,-29):-38,(4,0):-3,(78,11):101,(116,-29):-32,(8,-2):-26,(77,14):111,(63,0):-9,(56,-5):24,(32,-8):-22,(45,-5):24,(21,-1):26,(94,-22):95,(18,-13):-12,(20,-13):-6,(67,-6):52,(43,-7):19,(112,-19):-35,(116,-19):-32,(0,1):1,(100,-24):80,(90,-29):-40,(28,-9):-10,(30,-9):-20,(75,-10):64,(74,-5):53,(62,5):63,(118,-24):103,(78,-29):79,(25,-10):-16,(38,-13):-19,(53,-2):-17,(24,-13):-17,(106,-22):-38,(60,-4):54,(105,-23):-41,(33,-14):15,(79,11):89,(35,-14):-8,(84,-27):85,(119,-5):53,(41,6):28,(76,-2):-6,(44,-11):-8,(118,-29):78,(43,-1):26,(66,-1):-10,(42,-13):-9,(70,0):-7,(118,14):111,(55,-12):-13,(7,-1):55,(53,-14):-17,(26,-8):-13,(60,4):61,(108,14):111,(1,-1):5,(109,15):115,(98,-21):-39,(61,-10):-14,(112,-23):-35,(13,-4):25,(82,-26):-43,(60,-5):53,(86,-26):-45,(96,-23):-36,(58,-11):-20,(46,-8):-7,(72,-5):53,(117,-2):-29,(94,-28):-34,(68,-11):-8,(65,-1):-11,(41,-7):19,(102,-18):-40,(119,4):120,(54,-12):-16,(64,-5):53,(40,-8):-14,(100,-28):-30,(52,-1):-15,(88,-28):-38,(49,-11):-18,(0,-1):5,(120,0):-5,(108,-24):103,(69,-1):55,(120,-13):72,(12,-12):-12,(81,-26):83,(59,-11):-19,(3,0):-2,(111,-29):-34,(56,-7):19,(118,-19):-30,(10,-14):-9,(71,-13):-6,(23,-11):-15,(55,0):-13,(12,-2):-12,(70,-10):-7,(43,6):28,(67,5):68,None:0,(18,-10):-12,(20,-10):21,(112,-24):-35,(90,-23):-40,(56,4):14,(31,-9):32,(100,-29):79,(10,0):-9,(34,5):35,(30,-14):-20,(99,-28):-32,(75,-13):-7,(51,-1):-18,(113,-19):-36,(66,-2):-10,(26,-12):-13,(39,-5):24,(15,-1):26,(25,-13):-16,(12,-13):-12,(122,5):76,(27,4):14,(1,9):2,(121,-1):-27,(110,-23):-33,(117,-1):-29,(23,-14):-15,(9,-6):52,(94,-20):97,(77,12):118,(22,-9):-11,(32,-6):23,(90,-24):-40,(119,-4):54,(45,-7):19,(21,-4):25,(47,-11):-6,(44,-8):-8,(67,-4):54,(43,-5):24,(16,-13):-9,(42,-10):-9,(55,-7):56,(115,-24):-39,(114,-19):-37,(30,-11):-20,(99,-19):-32,(93,-24):-33,(111,-23):-34,(74,-7):13,(73,-1):-8,(25,-12):-16,(97,-24):-37,(0,3):4,(48,-8):49,(24,-11):-17,(1,2):3,(106,-24):-38,(60,-1):55,(2,0):-4,(78,-24):80,(35,-12):-8,(4,-1):-3,(8,-1):-26,(84,-25):-44,(47,-14):-6,(44,-9):-8,(46,-9):-7,(91,-24):80,(116,-18):-32,(59,-2):-19,(77,-29):78,(55,-10):-13,(110,-18):-33,(103,-25):84,(54,-13):-16,(40,-13):-14,(79,-23):88,(60,6):66,(88,-22):-38,(49,-14):-18,(51,-14):-18,(109,13):110,(98,-23):-39,(109,-18):-31,(61,-12):-14,(109,-29):78,(13,-6):23,(79,15):98,(36,-6):23,(59,-1):-19,(27,8):31,(77,11):107,(58,-13):-20,(54,0):-16}
  tokens=('%eof','C_TOKEN','C_DIRECTIVE','C_EQUALS','C_NUMBER','C_POS_PARAM','C_QUOTEDSTR','C_PAREN_OPEN','C_PAREN_CLOSE','C_COMMA','C_PLUS','C_MINUS','C_TIMES','C_DIVIDE','C_MODULO','C_DERIVES','C_ACTION','L_RX_START','L_RX_END','L_RX_ALTERNATE','L_RX_PLUS','L_RX_QUESTION','L_RX_STAR','L_RX_ATOM','L_RX_CHARCLASS','L_RX_CC_CHAR','L_RX_CC_END','L_RX_CC_RANGE','L_RX_GRP_CLOSE','L_RX_GRP_OPEN')
  nonterms=('%start','file','line','directive','expression','exp_factor','exp_term','expression_list_with_comma','expression_list','lexer_rule','regexp','regexp_alt','regexp_concat','regexp_multi','regexp_atom','regexp_charclass','regexp_cc_parts','regexp_cc_part')
  rules=((0,(1,),''),(1,(2,),None),(1,(1,2),None),(2,(3,),None),(2,(9,),None),(3,(-2,4),('(','processDirective',(')','$1','$2'))),(4,(5,),None),(4,(4,-12,5),(')','$2','$1','$3')),(4,(4,-13,5),(')','$2','$1','$3')),(4,(4,-14,5),(')','$2','$1','$3')),(5,(6,),None),(5,(5,-10,6),(')','$2','$1','$3')),(5,(5,-11,6),(')','$2','$1','$3')),(6,(-1,),('(','convertValue',(')','$1'))),(6,(-1,-3,4),(')','$2',('(','convertValue',(')','$1')),'$3')),(6,(-6,),('(','convertValue',(')','$1'))),(6,(-4,),('(','convertValue',(')','$1'))),(6,(-5,),('(','convertValue',(')','$1'))),(6,(-7,7,-8),'$2'),(6,(-1,-7,-8),(')','$2',('(','convertValue',(')','$1')))),(6,(-1,-7,7,-8),(')','$2',('(','convertValue',(')','$1')),'$3')),(7,(8,),None),(7,(8,-9),None),(8,(4,),(')','$1')),(8,(8,-9,4),('+','$1',(')','$3'))),(9,(-1,10),('(','rxAddRuleToTable',(')','$1','$2'))),(9,(-1,10,-16,4),('(','rxAddRuleToTable',(')','$1','$2','$4'))),(9,(-2,10),('(','rxAddRuleToTable',(')','$1','$2'))),(9,(-2,10,-16,4),('(','rxAddRuleToTable',(')','$1','$2','$4'))),(10,(-17,11,-18),'$2'),(11,(12,),None),(11,(11,-19,12),('(','rxMakeAlternateNFA',(')','$1','$3'))),(12,(13,),None),(12,(12,13),('(','rxMakeSequenceNFA',(')','$1','$2'))),(13,(14,),None),(13,(14,-22),('(','rxMakeStarNFA',(')','$1'))),(13,(14,-21),('(','rxMakeQuestionNFA',(')','$1'))),(13,(14,-20),('(','rxMakePlusNFA',(')','$1'))),(14,(-23,),('(','rxMakeAtomNFA',(')','$1'))),(14,(15,),None),(14,(-29,11,-28),'$2'),(15,(-24,16,-26),('(','rxMakeCharClassNFA',(')','$1','$2'))),(16,(17,),(')','$1')),(16,(16,17),('+','$1',(')','$2'))),(17,(-25,),(')','$1','$1')),(17,(-25,-27,-25),(')','$1','$3')))









if __name__ == '__main__':
  from flgLexer import flgLexer
  l = flgLexer()
  p = flgParser()
  p.parse(l)
